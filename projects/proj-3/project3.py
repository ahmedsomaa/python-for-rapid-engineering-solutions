from scipy.optimize import fsolve, leastsq  # to find voltage across diode
import matplotlib.pyplot as plt             # for plotting
import numpy as np                          # for log10, exp, arange
import warnings                             # to ignore warnings

# global constants
K = 1.380648e-23        # boltzman's constant
Q = 1.6021766208e-19    # coulomb's constant

# part 1 params
n = 1.7                 # ideality
T = 350                 # temperature
R = 11000               # resistor
Is = 1e-9               # source current
MIN = 0.1               # diode 1 applied voltage start
MAX = 2.5               # diode 1 applied voltage end

# initial guess for unknown params
Vd_INIT = 0.1

##################################################################################
# print_header:: print problem name header to the screen                         #
##################################################################################
def print_header(prob):
    print('-' * 18)
    print(f'Problem {prob} Solution')
    print('-' * 18)

##################################################################################
# diode_1:: equation of current passing through the first diode                  #
##################################################################################
def diode_1(Vd):
    return Is * (np.exp((Vd * Q) / (n * K * T)) - 1)

##################################################################################
# diode_nodal:: equation of nodal analysis                                       #
##################################################################################
def diode_nodal(Vd, Vs):
    return ((Vd - Vs) / R) + diode_1(Vd)

##################################################################################
# diode1_plot:: plots log diode current vs source voltage & diode voltage        #
##################################################################################
def diode1_plot(log_diode_curr, source_volt, diode_volt):
    plt.title('Diode Problem 1')
    plt.plot(source_volt, log_diode_curr, label='log(Diode Current) vs Source Voltage')
    plt.plot(diode_volt, log_diode_curr, label='log(Diode Current) vs Diode Voltage')
    plt.xlabel('Voltage (volt)')
    plt.ylabel('Diode current (log scale)')
    plt.legend(loc='lower right')
    plt.grid()
    plt.show()

##################################################################################
# diode1_solver:: solves project problem 1                                       #
##################################################################################
def diode1_solver():
    print_header(1)
    Vd = Vd_INIT        # initial guess for diode voltage
    diode_volt = []     # store diode voltage
    diode_curr = []     # store diode current
    source_volt = np.arange(MIN, MAX + MIN, MIN, dtype=float)  # voltage steps of 0.1
    
    for v in source_volt:
        # compute diode voltage for each step
        Vd = fsolve(diode_nodal, Vd, args=(v,))[0]
        # add it to diode voltage list
        diode_volt.append(Vd)

        # compute diode current for calculated Vd
        Id = diode_1(Vd)
        # append it to diode current list
        diode_curr.append(Id)

    print('diode voltage:')
    print(diode_volt)
    print('\ndiode current:')
    print(diode_curr)

    # draw the required plot
    diode1_plot(np.log10(diode_curr), source_volt, diode_volt)


##################################################################################
# diode2_solver:: solves project problem 2                                       #
##################################################################################
def diode2_solver():
    print_header(2)

##################################################################################
# main:: project entry point                                                     #
##################################################################################
def main():
    # solve problem 1
    diode1_solver()
    print('')
    # solve problem 2
    diode2_solver()

# Ignore the warnings generated by leastsq operations
warnings.simplefilter("ignore")

# start script
main()